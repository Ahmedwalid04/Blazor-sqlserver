@page "/"
@using Blazor.Data
@using Blazor.Models
@using Blazor.Services
@inject NavigationManager Navigation
@inject Loginservices loginservices
@inject Productservices ProductServices

<PageTitle>Home</PageTitle>

<h1 class="title">Store Database</h1>

<h3>Product List</h3>


<table class="table">
    <thead>
        <tr>
            <th>ProductId</th>
            <th>Name</th>
            <th>Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.Id</td>
                <td>@product.Name</td>
                <td>@product.Price</td>
                <td>
                    <button @onclick="() => EditProduct(product)">Edit</button>
                    <button @onclick="() => DeleteProduct(product.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<h3>Add/Edit Product</h3>

<EditForm Model="currentProduct" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="currentProduct.Name" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="currentProduct.Price" />
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>


@code {
    private Users user = new();
    private List<Product> products = new();
    private Product currentProduct = new();




    protected override async Task OnInitializedAsync()
    {
        products = await ProductServices.GetProductsAsync();
    
    
        // if (!loginservices.IsLoggedIn())
        // {
        //     Navigation.NavigateTo("/login");
        //     return;
        // }

       
    }
        
    private async Task HandleValidSubmit()
    {
        if (currentProduct.Id == 0)
        {
            await ProductServices.AddProductAsync(currentProduct);
        }
        else
        {
            await ProductServices.UpdateProductAsync(currentProduct);
        }
        currentProduct = new Product();
        products = await ProductServices.GetProductsAsync();
    }

    private void EditProduct(Product product)
    {
        currentProduct = product;
    }

    private async Task DeleteProduct(int productId)
    {
        await ProductServices.DeleteProductAsync(productId);
        products = await ProductServices.GetProductsAsync();
    }

   
    
    
}